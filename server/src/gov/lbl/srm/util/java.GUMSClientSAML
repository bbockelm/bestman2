/**
 *
 * *** Copyright Notice ***
 *
 * BeStMan Copyright (c) 2010, The Regents of the University of California, 
 * through Lawrence Berkeley National Laboratory (subject to receipt of any 
 * required approvals from the U.S. Dept. of Energy).  This software was 
 * developed under funding from the U.S. Department of Energy and is 
 * associated with the Berkeley Lab Scientific Data Management Group projects.
 * All rights reserved.
 * 
 * If you have questions about your rights to use or distribute this software, 
 * please contact Berkeley Lab's Technology Transfer Department at TTD@lbl.gov.
 * 
 * NOTICE.  This software was developed under funding from the 
 * U.S. Department of Energy.  As such, the U.S. Government has been granted 
 * for itself and others acting on its behalf a paid-up, nonexclusive, 
 * irrevocable, worldwide license in the Software to reproduce, prepare 
 * derivative works, and perform publicly and display publicly.  
 * Beginning five (5) years after the date permission to assert copyright is 
 * obtained from the U.S. Department of Energy, and subject to any subsequent 
 * five (5) year renewals, the U.S. Government is granted for itself and others
 * acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide license
 * in the Software to reproduce, prepare derivative works, distribute copies to
 * the public, perform publicly and display publicly, and to permit others to
 * do so.
 *
*/

/**
 *
 * Email questions to SRM@LBL.GOV
 * Scientific Data Management Research Group
 * Lawrence Berkeley National Laboratory
 * http://sdm.lbl.gov/bestman
 *
*/

package gov.lbl.srm.util;

import org.opensciencegrid.authz.common.*;
import org.opensciencegrid.authz.client.*;

import org.glite.security.voms.*;
import org.glite.security.voms.ac.*;

import java.io.*;
import java.net.*;
import javax.net.ssl.*;
import java.util.*;
import java.security.cert.X509Certificate;

//import EDU.oswego.cs.dl.util.concurrent.Mutex;

class ValidatorControl {
	org.glite.voms.VOMSValidator _vv = null;
	TSRMMutex _vvGuard = new TSRMMutex();

	public ValidatorControl() {
		Class clazz = org.glite.voms.VOMSValidator.class;
 		String result0 =org.theshoemakers.which4j.Which4J.which(clazz);
		System.out.println("which vomsvalidator?"+result0);
	}

	public List getCerts(X509Certificate[] certChain) {
		if (!TSRMUtil.acquireSync(_vvGuard)) {
			TSRMLog.info(ValidatorControl.class, null, "event=mutexFailed", null);
			return null;
		}
		List result = null;
		try {
			if (_vv == null) {
				//_vv = new org.glite.voms.VOMSValidator(null, null);
				org.glite.voms.PKIStore vomsStore = null;
				String vomsDir = System.getProperty( "VOMSDIR" );
        vomsDir = (vomsDir == null ) ? org.glite.voms.PKIStore.DEFAULT_VOMSDIR : vomsDir;
		TSRMLog.info(ValidatorControl.class, null, "vomsDir="+vomsDir, null);

        File theDir = new File(vomsDir);
        if (theDir.exists() && theDir.isDirectory() && theDir.list().length > 0) {
            vomsStore = new org.glite.voms.PKIStore(vomsDir, org.glite.voms.PKIStore.TYPE_VOMSDIR, true);
            vomsStore.rescheduleRefresh(900000);
        }

        org.glite.voms.PKIStore caStore;
        String caDir = System.getProperty( "CADIR" );
        caDir = (caDir == null) ? org.glite.voms.PKIStore.DEFAULT_CADIR : caDir;
		TSRMLog.info(ValidatorControl.class, null, "caDir="+caDir, null);
        caStore = new org.glite.voms.PKIStore( caDir, org.glite.voms.PKIStore.TYPE_CADIR, true );
        caStore.rescheduleRefresh(900000);

	_vv = new org.glite.voms.VOMSValidator(null, new org.glite.voms.ac.ACValidator(new org.glite.voms.PKIVerifier(vomsStore,caStore)));
			}
			_vv.setClientChain(certChain);
		
			List vc = _vv.parse().getVOMSAttributes();
            if ((vc == null) || (vc.size() == 0)) {
                 return null;
            } 
            int nVomsCerts = vc.size();
            TSRMLog.debug(ValidatorControl.class, null, "vomsCertSize="+nVomsCerts, null);
            for (int i=0; i<nVomsCerts; i++) {
                 org.glite.voms.VOMSAttribute curr = (org.glite.voms.VOMSAttribute)(vc.get(i));
                 TSRMLog.debug(ValidatorControl.class, null, "listVomsCert-"+i+"th="+curr.toString(), null);
            }
            if (gov.lbl.srm.server.Config._doValidateVoms) {
                _vv=_vv.validate();
            }
			TSRMLog.debug(ValidatorControl.class, null, "event=validated", null);
 
            List vomsCerts = _vv.parse().getVOMSAttributes();
                        if ((vomsCerts == null) || (vomsCerts.size() < nVomsCerts)) {
                                String detail = "null vomsCerts";
                                if (vomsCerts != null) {
                                        detail = "vomsCertSize="+vomsCerts.size() +" expected="+nVomsCerts;
                                }
                                TSRMLog.debug(ValidatorControl.class, null, "event=validationFailed.", detail);
                                result=null;
                        } else {
                                result=vomsCerts;
                        }
			return result;
		} catch (Exception e) {
			 TSRMLog.exception(GUMSClientSAML.class, null, e);
                        return null;
		} finally {
			 TSRMUtil.releaseSync(_vvGuard);
		}
	}
}

public class GUMSClientSAML implements IntGUMS {
   //private Stub _stub;
    private GRIDIdentityMappingServiceClient _caller;
	static ValidatorControl  _vvControl = new ValidatorControl();

    public GUMSClientSAML(String serviceUrl) throws Exception{
	TSRMLog.debug(this.getClass(), null, "event=init", "url="+serviceUrl);
	// trustStore: location of file containing server certificate chain
       // (https only)
       // trustStorePassword: password needed to access trustStore  (httpsOnly)
 
       // Disable server certificate validation (i.e. trust all certificates)
       // Create a trust manager that does not validate certificate  chains

       TrustManager[] trustAllCerts = new TrustManager[]{
          new X509TrustManager() {
                public java.security.cert.X509Certificate[]
                    getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(
                    java.security.cert.X509Certificate[] certs,
                     String  authType) { }
                public void checkServerTrusted(
                    java.security.cert.X509Certificate[] certs,
                    String  authType) { }
            }
       };

       // Install the all-trusting trust manager
       try {
	   SSLContext sc = SSLContext.getInstance("SSL");
	   
	   // Create empty HostnameVerifier
	   HostnameVerifier hv = new HostnameVerifier() {
		   public boolean verify(String arg0, SSLSession arg1) {
		       return true;
		   }
	       };
	   
	   sc.init(null, trustAllCerts, new java.security.SecureRandom());
	   HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	   HttpsURLConnection.setDefaultHostnameVerifier(hv);
       } catch (Exception e) 
	   {}
            
       _caller = new GRIDIdentityMappingServiceClient(new URL(serviceUrl));
    }

    public String getMappedID(String dn, String hostDN, X509Certificate[] certChain) throws Exception {
	String fqan = GUMSClientSAML.getFQAN(certChain);

	String acIssuer = null;
	if (fqan != null) {
	    acIssuer = GUMSClientSAML.getACIssuer(certChain);
	}

	return getMappedID(dn, hostDN, fqan, acIssuer);	
    }

    private String getMappedID(String dn, String hostDN, String userFQAN, String acIssuer) throws Exception {	
       TSRMLog.info(this.getClass(), null, "event=getMappedID dn="+ dn+ " hostDN="+hostDN, "fqan="+ userFQAN+" acIssuer="+acIssuer);
       String stored = gov.lbl.srm.server.Config.getStored(dn, userFQAN);
       if (stored != null) {
			TSRMLog.info(this.getClass(), null, "event=foundInCache", "result="+stored);
	   return stored;
       }

       GridId gridId = new GridId();
       gridId.setUserDN(dn);
       gridId.setHostDN(hostDN);
       if (userFQAN != null) {
	   gridId.setUserFQAN(userFQAN);
	   //gridId.setUserFQANIssuer("/DC=ch/DC=cern/OU=computers/CN=lcg-voms.cern.ch");
	   gridId.setUserFQANIssuer(acIssuer);
       }       

       LocalId localId = _caller.mapCredentials(gridId);
       if (localId == null) {
	   TSRMLog.debug(this.getClass(), null, "event=noLocalIDFound", "dn="+dn+" hostDN="+hostDN);
	   return null;
       }
       TSRMLog.debug(this.getClass(), null, "event=getMappedID", "result="+localId.getUserName());
       gov.lbl.srm.server.Config.storeID(dn, userFQAN, localId.getUserName());
       return localId.getUserName();
    }

	
	private static Vector  myParseFunction(X509Certificate[] certChain) {
Class clazz = org.bouncycastle.asn1.x509.AlgorithmIdentifier.class;
 String result =org.theshoemakers.which4j.Which4J.which(clazz);
System.out.println("which bouncy castle?"+result);

		int clientIdx = org.glite.security.util.CertUtil.findClientCert(certChain);
		if (clientIdx < 0) {
			System.out.println("No clientcert found in cert chain!!!!");
			return null;
		}

		Vector myVomsAttributes = new Vector();
		for (int i=0; i<certChain.length; i++) {
			byte[] payload = certChain[i].getExtensionValue(VOMSValidator.VOMS_EXT_OID);
			if (payload == null) {
				continue;
			}
			try {
				payload = ((org.bouncycastle.asn1.DEROctetString) new org.bouncycastle.asn1.DERInputStream(new ByteArrayInputStream(payload)).readObject()).getOctets();
				org.bouncycastle.asn1.ASN1Sequence seq1 = (org.bouncycastle.asn1.ASN1Sequence) new org.bouncycastle.asn1.DERInputStream(new ByteArrayInputStream(payload)).readObject();
				for (Enumeration e1 = seq1.getObjects(); e1.hasMoreElements();) {
                    org.bouncycastle.asn1.ASN1Sequence seq2 = (org.bouncycastle.asn1.ASN1Sequence) e1.nextElement();

                    for (Enumeration e2 = seq2.getObjects(); e2.hasMoreElements();) {
					org.bouncycastle.asn1.ASN1Sequence currASN = (org.bouncycastle.asn1.ASN1Sequence) e2.nextElement();
					System.out.println("currASN="+currASN.size());
					System.out.println("        "+currASN.getObjectAt(0));
					System.out.println("        "+currASN.getObjectAt(1));
                        org.glite.security.voms.ac.AttributeCertificate ac = new org.glite.security.voms.ac.AttributeCertificate(currASN);
						String alg=ac.getSignatureAlgorithm().getObjectId().getId();
 	                    System.out.println("alg="+alg);


                        for (int j = clientIdx; j < certChain.length; j++) {
                            if (ac.getHolder().isHolder(certChain[j])) {
                                VOMSAttribute va = new VOMSAttribute(ac);

                                    System.out.println("Found VOMS attribute from " + va.getHostPort() +
                                        " in certificate issued to " +
                                        certChain[j].getSubjectX500Principal().getName());
                                myVomsAttributes.add(va);
                            }else{
                                System.out.println("VOMS attribute cert found, but holder checking failed!");
                            }
                        }
                    }
                }
            } catch (Exception e) {
				e.printStackTrace();
				
			}
		}
		System.out.println("............done parsing");
		return myVomsAttributes;
	}

	public static List getVomsCert2(X509Certificate[] certChain) {
		if (certChain == null) {
            return null;
        }
		BasicVOMSTrustStore trustStore = new BasicVOMSTrustStore();
		org.glite.security.voms.ac.ACValidator mv = new org.glite.security.voms.ac.ACValidator(trustStore);
		 List result = null;
        try {
			List vc = myParseFunction(certChain);
            //VOMSValidator vv = new VOMSValidator(certChain);
            //List vc = vv.parse().getVOMSAttributes();
			for (java.util.ListIterator i = vc.listIterator(); i.hasNext();) {
				org.glite.security.voms.ac.AttributeCertificate ac = ((VOMSAttribute) i.next()).getAC();
				if (!ac.isValid()) {
					System.out.println(ac+" is invalid.");
					return null;
				}
				System.out.println("ac ="+ac);
				System.out.println("acIssuer="+ac.getIssuer());
				List vomsCerts = new org.glite.security.util.FileCertReader().readCerts(BasicVOMSTrustStore.DEFAULT_TRUST_STORE_LISTING);
				for (Iterator j = vomsCerts.iterator(); j.hasNext();) {
					X509Certificate c = (X509Certificate)(j.next());
					Object key = c.getSubjectX500Principal();
					System.out.println("key="+key);
				}
				X509Certificate[] candidates = trustStore.getAACandidate(ac.getIssuer());
				if (candidates == null) {
					System.out.println(" candidates is null");
					return null;
				} 
				int len = candidates.length;
				System.out.println(" candidates len="+len);
				for (int ii=0; ii<len; ii++) {
					X509Certificate cert = candidates[ii];
					//System.out.println("cert="+cert);
					System.out.println(" public key="+cert.getPublicKey());

					java.security.PublicKey key=cert.getPublicKey();
				    java.io.ByteArrayOutputStream b = new java.io.ByteArrayOutputStream();
					new org.bouncycastle.asn1.DEROutputStream(b).writeObject(ac.getAcinfo());
					
					String alg=ac.getSignatureAlgorithm().getObjectId().getId();
					System.out.println("alg="+alg);
					java.util.List<java.security.Provider.Service> list = sun.security.jca.GetInstance.getServices("Signature", alg);
					java.util.Iterator<java.security.Provider.Service> t = list.iterator();
					do {
						java.security.Provider.Service s = t.next();
						System.out.println("........service type="+s.getType()+" className="+s.getClassName());
						//Boolean rt = signatureInfo.get(s.getClassName());
						if (t.hasNext()) {
						 sun.security.rsa.RSASignature  curr = (sun.security.rsa.RSASignature)(s.newInstance(null));
						 java.security.MessageDigest md= java.security.MessageDigest.getInstance("MD5");
						 //java.security.Signature ss = java.security.Signature.getInstance("SHA1withRSA");
						 //System.out.println("....is sha1 with rsa?"+ss.getClass().getName());
						 //ss.initVerify(key);
						 //ss.update(b.toByteArray());
						 //System.out.println("look:"+ ss.verify(ac.getSignatureValue().getBytes()));
						
						 //java.security.MessageDigest md= java.security.MessageDigest.getInstance("SHA");
						// init with key:
						md.reset();
						// update 
						 md.update(b.toByteArray());
						 System.out.println("md digest value="+md.digest()); 
						// verify
						byte[] toVerify = ac.getSignatureValue().getBytes();
						java.security.interfaces.RSAPublicKey rsaKey = (java.security.interfaces.RSAPublicKey)(sun.security.rsa.RSAKeyFactory.toRSAKey(key));
						int keySize = sun.security.rsa.RSACore.getByteLength(rsaKey);
						byte[] decrypted = sun.security.rsa.RSACore.rsa(toVerify,rsaKey);
						sun.security.rsa.RSAPadding padding = sun.security.rsa.RSAPadding.getInstance(sun.security.rsa.RSAPadding.PAD_BLOCKTYPE_1,keySize, null);
						byte[] unpadded = padding.unpad(decrypted);
						byte[] decodedDigest = curr.decodeSignature(sun.security.x509.AlgorithmId.MD5_oid, unpadded);
						//byte[] decodedDigest = curr.decodeSignature(sun.security.x509.AlgorithmId.SHA_oid, unpadded);
						//boolean ok = curr.engineVerify(ac.getSignatureValue().getBytes());
						System.out.println("md digest value="+md.digest());
						System.out.println(".....xxxvs      = "+decodedDigest);
						System.out.println("result="+Arrays.equals(decodedDigest, md.digest()));
						}
					} while (t.hasNext());
				   java.security.Signature sig = java.security.Signature.getInstance(alg);
				   sig.initVerify(key);
				   sig.update(b.toByteArray());	
					System.out.println(ac.getSignatureAlgorithm().getObjectId());
				   System.out.println(sig+"  "+sig.getClass().getName());
				   System.out.println(sig.getClass().getName()+"......verified??"+sig.verify(ac.getSignatureValue().getBytes()));
	
					if (ac.verify(cert.getPublicKey())) {
						System.out.println("........verified");
					} else {
						System.out.println("........not verified");
					}
				}
				boolean  curr =mv.validate(ac);
				System.out.println(ac+" is .........validated?"+curr);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static List getVomsCert(X509Certificate[] certChain) {
		TSRMLog.debug(GUMSClientSAML.class, null, "certChain="+certChain, null);
        if (certChain == null) {
            return null;
        }

		return _vvControl.getCerts(certChain);
	}

	public static List getVomsCert3(X509Certificate[] certChain) {
Class clazz = org.glite.voms.VOMSValidator.class;
 String result0 =org.theshoemakers.which4j.Which4J.which(clazz);
System.out.println("which vomsvalidator?"+result0);

		TSRMLog.debug(GUMSClientSAML.class, null, "certChain="+certChain, null);
		if (certChain == null) {
			return null;
		}
		List result = null;
		try {
			org.glite.voms.VOMSValidator vv = new org.glite.voms.VOMSValidator(certChain);
		System.out.println("............no forced trusttore refresh()");
			//BasicVOMSTrustStore ts = new BasicVOMSTrustStore();
			//ts.refresh(); // voms does not refresh the contents of vomsdir/ when init trustStore!! so forcing it. otherwise cannt validate
			//vv.setTrustStore(ts);
			List vc = vv.parse().getVOMSAttributes();
			if ((vc == null) || (vc.size() == 0)) {
				return null;
			} 
			int nVomsCerts = vc.size();
			TSRMLog.debug(GUMSClientSAML.class, null, "vomsCertSize="+nVomsCerts, null);
			for (int i=0; i<nVomsCerts; i++) {
				org.glite.voms.VOMSAttribute curr = (org.glite.voms.VOMSAttribute)(vc.get(i));
				 TSRMLog.debug(GUMSClientSAML.class, null, "listVomsCert-"+i+"th="+curr.toString(), null);
			}
			if (gov.lbl.srm.server.Config._doValidateVoms) {
        		vv=vv.validate();
			}
            TSRMLog.debug(GUMSClientSAML.class, null, "event=validated", null);

            List vomsCerts = vv.parse().getVOMSAttributes();
			if ((vomsCerts == null) || (vomsCerts.size() < nVomsCerts)) {
				String detail = "null vomsCerts";
				if (vomsCerts != null) {
					detail = "vomsCertSize="+vomsCerts.size() +" expected="+nVomsCerts;
				}
				TSRMLog.debug(GUMSClientSAML.class, null, "event=validationFailed.", detail);
				result=null;
			} else {
				result=vomsCerts;
			}
      	} catch (Exception e) {
			TSRMLog.exception(GUMSClientSAML.class, null, e);
			return null;
		}
		if (result == null) {
			//throw new TSRMException("Authorization failed", false);
			return null;
		}
		return result;
	}

    public static String getACIssuer(X509Certificate[] certChain) {
	//if (certChain == null) {
	//    return null;
	//}
	try {
	    //VOMSValidator vv = new VOMSValidator(certChain);
		//TSRMLog.debug(GUMSClientSAML.class, "getACIssuer", "isValidated="+vv.isValidated(), null);
		//List vomsCerts = vv.parse().getVOMSAttributes();
		List vomsCerts = getVomsCert(certChain);

	    if (vomsCerts == null) {
		TSRMLog.debug(GUMSClientSAML.class, null, "event=getACIssuer vomsCert=null", null);
		return null;
	    }
	    
	    if (vomsCerts.size() == 0) {
		TSRMLog.debug(GUMSClientSAML.class, null, "event=getACIssuer vomsCertSize=null", null);
		return null;
	    }
	
	     org.glite.voms.VOMSAttribute  curr = (org.glite.voms.VOMSAttribute)(vomsCerts.get(0));
	    org.glite.voms.ac.AttributeCertificate ac = curr.getAC();
	    if ((ac == null) || (ac.getIssuer() == null)) {
		return null;
	    }
	    TSRMLog.debug(GUMSClientSAML.class, "getACIssuer", "issuer="+ac.getIssuer().toString(), null);
	    
	    return ac.getIssuer().toString();
	} catch (Exception e) {
	    e.printStackTrace();
	    return null;
	}
    }

    public static String getFQAN(X509Certificate[] certChain) {
	TSRMLog.debug(GUMSClientSAML.class, null, "event=getFQAN input="+certChain, null);
	if (certChain == null) {
	    return null;
	}
	
	TSRMLog.debug(GUMSClientSAML.class, null, "event=getFQAN", null);
	List all = VOMSInfo.retrieve(certChain);
        if (all == null) {
	    return null;
	}
	String allFqan="";

	for (int i=0; i<all.size(); i++) {
	    allFqan+=i+":"+all.get(i).toString();
	}
	TSRMLog.info(GUMSClientSAML.class, "getFQAN", "fqanSize="+all.size(), "content="+allFqan);
	if (all.size() == 0) {
	   return null;
	}
	return all.get(0).toString();
    }
}

class VOMSInfo {
    public static List retrieve(X509Certificate[] certChain) {
	try {
	    //VOMSValidator vv = new VOMSValidator(certChain);
	    //List vomsCerts = vv.parse().getVOMSAttributes();
	    List vomsCerts = GUMSClientSAML.getVomsCert(certChain);
	    if (vomsCerts == null) {
		return null;
	    }
	    Vector result = new Vector();
	    
	    int total = vomsCerts.size();
	    
	    for (int i=0; i<total; i++) {
	    org.glite.voms.VOMSAttribute curr = (org.glite.voms.VOMSAttribute)(vomsCerts.get(i));
	    //AttributeCertificate ac = curr.getAC();
	    //TSRMLog.info(GUMSClient.class, "ac issuer="+ac.getIssuer().toString(), null, null);
	    result.addAll(curr.getFullyQualifiedAttributes());
	    }
	    return result;
	} catch (Exception e) {
	    e.printStackTrace();

	    TSRMLog.exception(VOMSInfo.class, "retrieve fqan", e);	    

	    return null;
	}
    }
}
